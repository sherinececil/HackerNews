{"version":3,"sources":["Search.js","NewsArticle.js","Pagination.js","NavbarPage.js","App.js","reportWebVitals.js","index.js"],"names":["Search","getQuery","className","onSubmit","event","preventDefault","text","target","userQuery","value","alert","type","name","Button","variant","NewsArticle","isLoading","articles","size","length","Alert","Heading","map","article","Accordion","defaultActiveKey","Card","border","Toggle","as","Header","eventKey","Body","title","story_title","Collapse","Text","moment","created_at","format","Link","href","url","story_url","created_at_i","Pagination","articlesPerPage","totalArticles","changePage","pageNumbers","putOnPage","i","push","number","style","color","onClick","NavbarPage","Container","Navbar","expand","bg","Brand","App","useState","setArticles","setIsLoading","query","setQuery","currentPage","setCurrentPage","useEffect","setTimeout","fetch","then","result","console","log","ok","json","Error","data","hits","indexOfLastArticle","indexOfFirstArticle","currentArticles","slice","quer","pageNumber","window","scrollTo","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.19efa82a.chunk.js","sourcesContent":["import Button from \"react-bootstrap/Button\";\r\n\r\nexport default function Search({ getQuery }) {\r\n  const handleClick = (event) => {\r\n    event.preventDefault();\r\n    const text = event.target.userQuery.value;\r\n    if (text) {\r\n      getQuery(text);\r\n      //console.log(text);\r\n      event.target.userQuery.value = \"\";\r\n    } else {\r\n      alert(\"Somethihng went wrong\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"navbar navbar-light bg-light\">\r\n      <form className=\"form-inline\" onSubmit={handleClick}>\r\n        <input\r\n          className=\"form-control mr-sm-2 mb-4\"\r\n          type=\"text\"\r\n          name=\"userQuery\"\r\n        />{\" \"}\r\n        <Button variant=\"success\" type=\"submit\" className=\"mb-4\">\r\n          Search\r\n        </Button>{\" \"}\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import Card from \"react-bootstrap/Card\";\r\nimport PacmanLoader from \"react-spinners/PacmanLoader\";\r\nimport moment from \"moment\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\n\r\nexport default function NewsArticle({ isLoading, articles }) {\r\n  return isLoading ? (\r\n    <PacmanLoader size={60} />\r\n  ) : articles.length === 0 ? (\r\n    <Alert variant=\"danger\" className=\"mt-4\">\r\n      <Alert.Heading>Aww, snap!</Alert.Heading>\r\n      <h2>&#9785;</h2>\r\n      <h4 className=\"mb-2 mt-4\">There is no matching results... try again !</h4>\r\n    </Alert>\r\n  ) : (\r\n    articles.map((article) => (\r\n      <Accordion defaultActiveKey=\"0\">\r\n        <Card className=\"mb-2\" key={article.created_at_i} border=\"secondary\">\r\n          <Accordion.Toggle as={Card.Header} eventKey=\"1\">\r\n            <Card.Body> {article.title || article.story_title}</Card.Body>\r\n          </Accordion.Toggle>\r\n          <Accordion.Collapse eventKey=\"1\">\r\n            <Card.Text className=\"mb-2 text-muted\">\r\n              {moment(article.created_at).format(\"MMM Do YY\")}{\" \"}\r\n              <Card.Link\r\n                className=\"mb-2 text-muted\"\r\n                href={article.url || article.story_url}\r\n                target=\"_blank\"\r\n              >\r\n                Full article\r\n              </Card.Link>\r\n            </Card.Text>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n      </Accordion>\r\n    ))\r\n  );\r\n}\r\n","export default function Pagination({\r\n  articlesPerPage,\r\n  totalArticles,\r\n  changePage\r\n}) {\r\n  const pageNumbers = [];\r\n\r\n  const putOnPage = totalArticles / articlesPerPage;\r\n  //console.log(putOnPage);\r\n  for (let i = 1; i <= putOnPage; i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  return (\r\n    <nav>\r\n      <ul className=\"pagination\">\r\n        {pageNumbers.map((number) => (\r\n          <li\r\n            key={number}\r\n            className=\"page-link\"\r\n            style={{ color: \"black\" }}\r\n            onClick={() => changePage(number)}\r\n          >\r\n            {number}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n","import Navbar from \"react-bootstrap/Navbar\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nexport default function NavbarPage() {\r\n  return (\r\n    <>\r\n      <Container className=\"nav-container\">\r\n        <Navbar expand=\"lg\" variant=\"light\" bg=\"light\">\r\n          <Navbar.Brand href=\"#\">Hacker news Clone</Navbar.Brand>\r\n        </Navbar>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","import \"./styles.css\";\nimport React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Search from \"./Search\";\nimport NewsArticle from \"./NewsArticle\";\nimport Pagination from \"./Pagination\";\nimport NavbarPage from \"./NavbarPage\";\n\nexport default function App() {\n  const [articles, setArticles] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [query, setQuery] = useState(\"cryptocurrency\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [articlesPerPage] = useState(10);\n\n  useEffect(() => {\n    setIsLoading(true);\n    setTimeout(() => {\n      fetch(\n        `https://hn.algolia.com/api/v1/search?query=${query}&hitsPerPage=60`\n      )\n        .then((result) => {\n          console.log(result);\n          if (!result.ok) {\n            throw Error(\"Whoops!\");\n          } else {\n            return result.json();\n          }\n        })\n        .then((data) => {\n          console.log(data.hits);\n          setArticles(data.hits);\n          setIsLoading(false);\n        });\n    }, 3000);\n  }, [query]);\n\n  //pagination\n  const indexOfLastArticle = currentPage * articlesPerPage;\n  const indexOfFirstArticle = indexOfLastArticle - articlesPerPage;\n  const currentArticles = articles.slice(\n    indexOfFirstArticle,\n    indexOfLastArticle\n  );\n\n  //change page\n  const changePage = (pageNumber) => {\n    setCurrentPage(pageNumber);\n    window.scrollTo(0, 0);\n  };\n\n  return (\n    <div className=\"App\">\n      <NavbarPage />\n      <Search getQuery={(quer) => setQuery(quer)} />\n      <NewsArticle isLoading={isLoading} articles={currentArticles} />\n      {isLoading ? null : (\n        <Pagination\n          articlesPerPage={articlesPerPage}\n          totalArticles={articles.length}\n          changePage={changePage}\n        />\n      )}\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}